import numpy as np
import cv2

img = cv2.imread(r"data\labeled_data\test\images\0363fea2-fyziologicky_nalez_frame_201_0000_jpg.rf.536d167c9aadecf6167ff071d27db592.jpg")
arr = np.array([[175.01, 90.619],
                [174.17, 91.458],
                [172.49, 91.458],
                [170.81, 93.136],
                [170.81, 93.975],
                [169.97, 94.814],
                [169.97, 96.492],
                [169.13, 97.331],
                [169.13, 104.04],
                [168.29, 104.88],
                [168.29, 143.48],
                [169.13, 144.32],
                [169.13, 155.23],
                [169.97, 156.07],
                [169.97, 160.26],
                [170.81, 161.1],
                [170.81, 166.13],
                [171.65, 166.97],
                [171.65, 176.2],
                [172.49, 177.04],
                [172.49, 191.31],
                [173.33, 192.15],
                [173.33, 199.7],
                [174.17, 200.54],
                [174.17, 205.57],
                [175.01, 206.41],
                [175.01, 210.6],
                [175.85, 211.44],
                [175.85, 214.8],
                [176.68, 215.64],
                [176.68, 218.16],
                [177.52, 219],
                [177.52, 223.19],
                [178.36, 224.03],
                [178.36, 233.26],
                [179.2, 234.1],
                [179.2, 243.33],
                [178.36, 244.17],
                [178.36, 258.43],
                [177.52, 259.27],
                [177.52, 302.06],
                [176.68, 302.9],
                [176.68, 314.65],
                [177.52, 315.49],
                [177.52, 324.72],
                [176.68, 325.56],
                [176.68, 344.02],
                [175.85, 344.85],
                [175.85, 354.08],
                [175.01, 354.92],
                [175.01, 373.38],
                [175.85, 374.22],
                [175.85, 380.93],
                [176.68, 381.77],
                [176.68, 382.61],
                [177.52, 383.45],
                [177.52, 384.29],
                [178.36, 385.13],
                [178.36, 385.97],
                [179.2, 386.81],
                [180.04, 386.81],
                [180.88, 385.97],
                [181.72, 385.97],
                [183.4, 384.29],
                [183.4, 382.61],
                [184.24, 381.77],
                [184.24, 378.42],
                [185.07, 377.58],
                [185.07, 375.9],
                [184.24, 375.06],
                [184.24, 364.99],
                [183.4, 364.15],
                [183.4, 350.73],
                [182.56, 349.89],
                [182.56, 345.69],
                [181.72, 344.85],
                [181.72, 328.91],
                [182.56, 328.07],
                [182.56, 318.84],
                [183.4, 318],
                [183.4, 297.03],
                [182.56, 296.19],
                [182.56, 289.48],
                [183.4, 288.64],
                [183.4, 277.73],
                [184.24, 276.89],
                [184.24, 268.5],
                [185.07, 267.66],
                [185.07, 263.47],
                [185.91, 262.63],
                [185.91, 258.43],
                [186.75, 257.59],
                [186.75, 253.4],
                [187.59, 252.56],
                [187.59, 248.36],
                [188.43, 247.52],
                [188.43, 245.01],
                [189.27, 244.17],
                [189.27, 242.49],
                [190.11, 241.65],
                [190.11, 239.13],
                [190.95, 238.29],
                [190.95, 234.1],
                [191.79, 233.26],
                [191.79, 228.23],
                [192.63, 227.39],
                [192.63, 220.67],
                [193.47, 219.83],
                [193.47, 209.77],
                [194.3, 208.93],
                [194.3, 199.7],
                [195.14, 198.86],
                [195.14, 192.15],
                [195.98, 191.31],
                [195.98, 186.27],
                [196.82, 185.43],
                [196.82, 177.04],
                [197.66, 176.2],
                [197.66, 156.9],
                [198.5, 156.07],
                [198.5, 139.28],
                [199.34, 138.45],
                [199.34, 119.99],
                [200.18, 119.15],
                [200.18, 108.24],
                [199.34, 107.4],
                [199.34, 100.69],
                [198.5, 99.848],
                [198.5, 96.492],
                [197.66, 95.653],
                [197.66, 93.975],
                [196.82, 93.136],
                [196.82, 92.297],
                [195.98, 91.458],
                [194.3, 91.458],
                [193.47, 90.619]])
# Point with the lowest x coordinate
starting_index = np.unravel_index(arr[:, 1].argmin(), arr[:, 1].shape)
starting_point = arr[starting_index]
remaining_points = np.delete(arr, starting_index, 0)
# Slopes between the starting point and all other points
slopes = (remaining_points[:, 0] - starting_point[0]) / (remaining_points[:, 1] - starting_point[1])
slopes = slopes.reshape(-1, 1)
# Sorting the points based on their slope
remaining_points = remaining_points[slopes[:, 0].argsort()[::-1]]
# List of points composing the convex hull
ch = np.array([starting_point])
for idx, point in enumerate(remaining_points):
    if idx < 1:
        ch = np.concatenate((ch, point.reshape(1, 2)), axis=0)
        continue
    vector_point = point - ch[-2]
    vector_last_ch = ch[-1] - ch[-2]
    vector_product = np.cross(vector_last_ch, vector_point)
    if vector_product > 0:
        ch = np.delete(ch, -1, 0)
    ch = np.concatenate((ch, point.reshape(1, 2)), axis=0)

img = cv2.polylines(img, [ch.astype(int)], True, (0, 0, 255), 1)
for point in remaining_points:
    img = cv2.circle(img, (int(point[0]), int(point[1])), 1, (0, 255, 255), -1)

cv2.imshow("Image", img)
cv2.waitKey(0)
cv2.destroyAllWindows()

print(ch)
